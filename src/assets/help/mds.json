{
    "method": "MDS",
    "desc": "<span class='help-method'>Multidimensional scaling</span>Read more in the scikit-learn user guide. ",
    "url": "http://scikit-learn.org/stable/modules/generated/sklearn.manifold.MDS.html#sklearn.manifold.MDS",
    "params": [
        {
            "name": "n components",
            "type": "int, optional, default",
            "desc": "Number of dimensions in which to immerse the dissimilarities."
        },
        {
            "name": "metric",
            "type": "boolean, optional, default",
            "desc": "If True, perform metric MDS; otherwise, perform nonmetric MDS."
        },
        {
            "name": "n init",
            "type": "int, optional, default",
            "desc": "Number of times the SMACOF algorithm will be run with different initializations. The final results will be the best output of the runs, determined by the run with the smallest final stress."
        },
        {
            "name": "max iter",
            "type": "int, optional, default",
            "desc": "Maximum number of iterations of the SMACOF algorithm for a single run."
        },
        {
            "name": "verbose",
            "type": "int, optional, default",
            "desc": "Level of verbosity."
        },
        {
            "name": "eps",
            "type": "float, optional, default",
            "desc": "Relative tolerance with respect to stress at which to declare convergence."
        },
        {
            "name": "n jobs",
            "type": "int, optional, default",
            "desc": "The number of jobs to use for the computation. If multiple initializations are used (n_init), each run of the algorithm is computed in parallel. If -1 all CPUs are used. If 1 is given, no parallel computing code is used at all, which is useful for debugging. For n_jobs below -1, (n_cpus + 1 + n_jobs) are used. Thus for n_jobs = -2, all CPUs but one are used."
        },
        {
            "name": "random state",
            "type": "int, RandomState instance or None, optional, default",
            "desc": "The generator used to initialize the centers.  If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by np.random."
        },
        {
            "name": "dissimilarity",
            "type": "‘euclidean’ | ‘precomputed’, optional, default",
            "desc": "Dissimilarity measure to use:   ‘euclidean’: Pairwise Euclidean distances between points in the dataset.    ‘precomputed’: Pre-computed dissimilarities are passed directly to fit and fit_transform."
        }
    ],
    "attrs": [
        {
            "name": "embedding",
            "type": "array-like, shape (n_components, n_samples)",
            "desc": "Stores the position of the dataset in the embedding space."
        },
        {
            "name": "stress",
            "type": "float",
            "desc": "The final value of the stress (sum of squared distance of the disparities and the distances for all constrained points)."
        }
    ],
    "citations": [
        {
            "name": "",
            "desc": "",
            "url": ""
        }
    ]
}