{
    "method": "TSNE",
    "summary": "TSNE is a technique for dimensionality reduction that is particularly well suited for the visualization of high-dimensional datasets. The technique can be implemented via Barnes-Hut approximations, allowing it to be applied on large real-world datasets.",
    "desc": "<span class='help-method'>t-distributed Stochastic Neighbor Embedding.</span>t-SNE is a tool to visualize high-dimensional data. It converts similarities between data points to joint probabilities and tries to minimize the Kullback-Leibler divergence between the joint probabilities of the low-dimensional embedding and the high-dimensional data. t-SNE has a cost function that is not convex, i.e. with different initializations we can get different results. It is highly recommended to use another dimensionality reduction method (e.g. PCA for dense data or TruncatedSVD for sparse data) to reduce the number of dimensions to a reasonable amount (e.g. 50) if the number of features is very high. This will suppress some noise and speed up the computation of pairwise distances between samples. For more tips see Laurens van der Maaten’s FAQ.",
    "url": "http://scikit-learn.org/stable/modules/generated/sklearn.manifold.TSNE.html#sklearn.manifold.TSNE",
    "params": [
        {
            "name": "n components",
            "type": "int, optional (default)",
            "desc": "Dimension of the embedded space."
        },
        {
            "name": "perplexity",
            "type": "float, optional (default)",
            "desc": "The perplexity is related to the number of nearest neighbors that is used in other manifold learning algorithms. Larger datasets usually require a larger perplexity. Consider selecting a value between 5 and 50. The choice is not extremely critical since t-SNE is quite insensitive to this parameter."
        },
        {
            "name": "early exaggeration",
            "type": "float, optional (default)",
            "desc": "Controls how tight natural clusters in the original space are in the embedded space and how much space will be between them. For larger values, the space between natural clusters will be larger in the embedded space. Again, the choice of this parameter is not very critical. If the cost function increases during initial optimization, the early exaggeration factor or the learning rate might be too high."
        },
        {
            "name": "learning rate",
            "type": "float, optional (default)",
            "desc": "The learning rate for t-SNE is usually in the range [10.0, 1000.0]. If the learning rate is too high, the data may look like a ‘ball’ with any point approximately equidistant from its nearest neighbours. If the learning rate is too low, most points may look compressed in a dense cloud with few outliers. If the cost function gets stuck in a bad local minimum increasing the learning rate may help."
        },
        {
            "name": "n iter",
            "type": "int, optional (default)",
            "desc": "Maximum number of iterations for the optimization. Should be at least 250."
        },
        {
            "name": "n iter without progress",
            "type": "int, optional (default)",
            "desc": "Maximum number of iterations without progress before we abort the optimization, used after 250 initial iterations with early exaggeration. Note that progress is only checked every 50 iterations so this value is rounded to the next multiple of 50.  New in version 0.17: parameter n_iter_without_progress to control stopping criteria."
        },
        {
            "name": "min grad norm",
            "type": "float, optional (default)",
            "desc": "If the gradient norm is below this threshold, the optimization will be stopped."
        },
        {
            "name": "metric",
            "type": "string or callable, optional",
            "desc": "The metric to use when calculating distance between instances in a feature array. If metric is a string, it must be one of the options allowed by scipy.spatial.distance.pdist for its metric parameter, or a metric listed in pairwise.PAIRWISE_DISTANCE_FUNCTIONS. If metric is “precomputed”, X is assumed to be a distance matrix. Alternatively, if metric is a callable function, it is called on each pair of instances (rows) and the resulting value recorded. The callable should take two arrays from X as input and return a value indicating the distance between them. The default is “euclidean” which is interpreted as squared euclidean distance."
        },
        {
            "name": "init",
            "type": "string or numpy array, optional (default)",
            "desc": "Initialization of embedding. Possible options are ‘random’, ‘pca’, and a numpy array of shape (n_samples, n_components). PCA initialization cannot be used with precomputed distances and is usually more globally stable than random initialization."
        },
        {
            "name": "verbose",
            "type": "int, optional (default)",
            "desc": "Verbosity level."
        },
        {
            "name": "random state",
            "type": "int, RandomState instance or None, optional (default)",
            "desc": "If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by np.random.  Note that different initializations might result in different local minima of the cost function."
        },
        {
            "name": "method",
            "type": "string (default)",
            "desc": "By default the gradient calculation algorithm uses Barnes-Hut approximation running in O(NlogN) time. method=’exact’ will run on the slower, but exact, algorithm in O(N^2) time. The exact algorithm should be used when nearest-neighbor errors need to be better than 3%. However, the exact method cannot scale to millions of examples.  New in version 0.17: Approximate optimization method via the Barnes-Hut."
        },
        {
            "name": "angle",
            "type": "float (default)",
            "desc": "Only used if method=’barnes_hut’ This is the trade-off between speed and accuracy for Barnes-Hut T-SNE. ‘angle’ is the angular size (referred to as theta in [3]) of a distant node as measured from a point. If this size is below ‘angle’ then it is used as a summary node of all points contained within it. This method is not very sensitive to changes in this parameter in the range of 0.2 - 0.8. Angle less than 0.2 has quickly increasing computation time and angle greater 0.8 has quickly increasing error."
        }
    ],
    "attrs": [
        {
            "name": "embedding",
            "type": "array-like, shape (n_samples, n_components)",
            "desc": "Stores the embedding vectors."
        },
        {
            "name": "kl divergence",
            "type": "float",
            "desc": "Kullback-Leibler divergence after optimization."
        },
        {
            "name": "n iter",
            "type": "int",
            "desc": "Number of iterations run."
        }
    ],
    "citations": [
        {
            "name": "Visualizing High-Dimensional Data Using t-SNE",
            "desc": "van der Maaten, L.J.P.; Hinton, G.E. Visualizing High-Dimensional Data Using t-SNE. Journal of Machine Learning Research 9:2579-2605, 2008.",
            "url": "http://www.jmlr.org/papers/volume9/vandermaaten08a/vandermaaten08a.pdf"
        },
        {
            "name": "t-Distributed Stochastic Neighbor Embedding",
            "desc": "van der Maaten, L.J.P. t-Distributed Stochastic Neighbor Embedding",
            "url": "http://lvdmaaten.github.io/tsne/"
        },
        {
            "name": "Accelerating t-SNE using Tree-Based Algorithms",
            "desc": "L.J.P. van der Maaten. Accelerating t-SNE using Tree-Based Algorithms. Journal of Machine Learning Research 15(Oct):3221-3245, 2014.",
            "url": "http://lvdmaaten.github.io/publications/papers/JMLR_2014.pdf"
        },
        {
            "name": "Scikit-learn: Machine Learning in Python",
            "desc": "Scikit-learn: Machine Learning in Python, Pedregosa et al., JMLR 12, pp. 2825-2830, 2011.",
            "url": "http://www.jmlr.org/papers/volume12/pedregosa11a/pedregosa11a.pdf"
        },
        {
            "name": "API design for machine learning software: experiences from the scikit-learn project",
            "desc": "API design for machine learning software: experiences from the scikit-learn project, Buitinck et al., 2013.",
            "url": "http://www.di.ens.fr/sierra/pdfs/icml09.pdf"
        }
    ]
}