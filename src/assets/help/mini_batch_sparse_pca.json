{
    "method": "Mini Batch Sparse PCA",
    "summary": ">Mini-batch Sparse Principal Components Analysis finds the set of sparse components that can optimally reconstruct the data.  The amount of sparseness is controllable by the coefficient of the L1 penalty, given by the parameter alpha. ",
    "desc": "<span class='help-method'>Mini-batch Sparse Principal Components Analysis</span>Finds the set of sparse components that can optimally reconstruct the data.  The amount of sparseness is controllable by the coefficient of the L1 penalty, given by the parameter alpha. ",
    "url": "http://scikit-learn.org/stable/modules/generated/sklearn.decomposition.MiniBatchSparsePCA.html#sklearn.decomposition.MiniBatchSparsePCA",
    "params": [
        {
            "name": "n components",
            "type": "int,",
            "desc": "number of sparse atoms to extract"
        },
        {
            "name": "alpha",
            "type": "int,",
            "desc": "Sparsity controlling parameter. Higher values lead to sparser components."
        },
        {
            "name": "ridge alpha",
            "type": "float,",
            "desc": "Amount of ridge shrinkage to apply in order to improve conditioning when calling the transform method."
        },
        {
            "name": "n iter",
            "type": "int,",
            "desc": "number of iterations to perform for each mini batch"
        },
        {
            "name": "callback",
            "type": "callable or None, optional (default",
            "desc": "callable that gets invoked every five iterations"
        },
        {
            "name": "batch size",
            "type": "int,",
            "desc": "the number of features to take in each mini batch"
        },
        {
            "name": "verbose",
            "type": "int",
            "desc": "Controls the verbosity; the higher, the more messages. Defaults to 0."
        },
        {
            "name": "shuffle",
            "type": "boolean,",
            "desc": "whether to shuffle the data before splitting it in batches"
        },
        {
            "name": "n jobs",
            "type": "int,",
            "desc": "number of parallel jobs to run, or -1 to autodetect."
        },
        {
            "name": "method",
            "type": "{‘lars’, ‘cd’}",
            "desc": "lars: uses the least angle regression method to solve the lasso problem (linear_model.lars_path) cd: uses the coordinate descent method to compute the Lasso solution (linear_model.Lasso). Lars will be faster if the estimated components are sparse."
        },
        {
            "name": "random state",
            "type": "int, RandomState instance or None, optional (default=None)",
            "desc": "If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by np.random."
        }
    ],
    "attrs": [
        {
            "name": "components",
            "type": "array, [n_components, n_features]",
            "desc": "Sparse components extracted from the data."
        },
        {
            "name": "error",
            "type": "array",
            "desc": "Vector of errors at each iteration."
        },
        {
            "name": "n iter",
            "type": "int",
            "desc": "Number of iterations run."
        }
    ],
    "citations": [
        {
            "name": "Scikit-learn: Machine Learning in Python",
            "desc": "Scikit-learn: Machine Learning in Python, Pedregosa et al., JMLR 12, pp. 2825-2830, 2011.",
            "url": "http://www.jmlr.org/papers/volume12/pedregosa11a/pedregosa11a.pdf"
        },
        {
            "name": "API design for machine learning software: experiences from the scikit-learn project",
            "desc": "API design for machine learning software: experiences from the scikit-learn project, Buitinck et al., 2013.",
            "url": "http://www.di.ens.fr/sierra/pdfs/icml09.pdf"
        }
    ]
}