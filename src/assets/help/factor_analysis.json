{"method":"Factor Analysis","desc":"Factor Analysis (FA)<br />A simple linear generative model with Gaussian latent variables.<br />The observations are assumed to be caused by a linear transformation of<br />lower dimensional latent factors and added Gaussian noise.<br />Without loss of generality the factors are distributed according to a<br />Gaussian with zero mean and unit covariance. The noise is also zero mean<br />and has an arbitrary diagonal covariance matrix.<br />If we would restrict the model further, by assuming that the Gaussian<br />noise is even isotropic (all diagonal entries are the same) we would obtain<br />PPCA.<br />FactorAnalysis performs a maximum likelihood estimate of the so-called<br />loading matrix, the transformation of the latent variables to the<br />observed ones, using expectation-maximization (EM).<br />Read more in the User Guide.<br />","url":"http://scikit-learn.org/stable/modules/generated/sklearn.decomposition.FactorAnalysis.html#sklearn.decomposition.FactorAnalysis","params":[{"name":"n_components","type":"int | None","desc":"Dimensionality of latent space, the number of components of X that are obtained after transform. If None, n_components is set to the number of features."},{"name":"tol","type":"float","desc":"Stopping tolerance for EM algorithm."},{"name":"copy","type":"bool","desc":"Whether to make a copy of X. If False, the input X gets overwritten during fitting."},{"name":"max_iter","type":"int","desc":"Maximum number of iterations."},{"name":"noise_variance_init","type":"None | array, shape=(n_features,)","desc":"The initial guess of the noise variance for each feature. If None, it defaults to np.ones(n_features)"},{"name":"svd_method","type":"{‘lapack’, ‘randomized’}","desc":"Which SVD method to use. If ‘lapack’ use standard SVD from scipy.linalg, if ‘randomized’ use fast randomized_svd function. Defaults to ‘randomized’. For most applications ‘randomized’ will be sufficiently precise while providing significant speed gains. Accuracy can also be improved by setting higher values for iterated_power. If this is not sufficient, for maximum precision you should choose ‘lapack’."},{"name":"iterated_power","type":"int, optional","desc":"Number of iterations for the power method. 3 by default. Only used if svd_method equals ‘randomized’"},{"name":"random_state","type":"int, RandomState instance or None, optional (default=0)","desc":"If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by np.random. Only used when svd_method equals ‘randomized’."}],"attrs":[{"name":"components_","type":"array, [n_components, n_features]","desc":"Components with maximum variance."},{"name":"loglike_","type":"list, [n_iterations]","desc":"The log likelihood at each iteration."},{"name":"noise_variance_","type":"array, shape=(n_features,)","desc":"The estimated noise variance for each feature."},{"name":"n_iter_","type":"int","desc":"Number of iterations run."}]}