{
    "method": "Kernel PCA",
    "summary": "",
    "desc": "<span class='help-method'>Kernel Principal component analysis (KPCA)</span>Non-linear dimensionality reduction through the use of kernels (see Pairwise metrics, Affinities and Kernels). Read more in the scikit-learn user guide. ",
    "url": "http://scikit-learn.org/stable/modules/generated/sklearn.decomposition.KernelPCA.html#sklearn.decomposition.KernelPCA",
    "params": [
        {
            "name": "n components",
            "type": "int, default=None",
            "desc": "Number of components. If None, all non-zero components are kept."
        },
        {
            "name": "kernel",
            "type": "“linear” | “poly” | “rbf” | “sigmoid” | “cosine” | “precomputed”",
            "desc": "Kernel. Default=”linear”."
        },
        {
            "name": "gamma",
            "type": "float, default=1/n_features",
            "desc": "Kernel coefficient for rbf, poly and sigmoid kernels. Ignored by other kernels."
        },
        {
            "name": "degree",
            "type": "int, default=3",
            "desc": "Degree for poly kernels. Ignored by other kernels."
        },
        {
            "name": "coef0",
            "type": "float, default=1",
            "desc": "Independent term in poly and sigmoid kernels. Ignored by other kernels."
        },
        {
            "name": "kernel params",
            "type": "mapping of string to any, default=None",
            "desc": "Parameters (keyword arguments) and values for kernel passed as callable object. Ignored by other kernels."
        },
        {
            "name": "alpha",
            "type": "int, default=1.0",
            "desc": "Hyperparameter of the ridge regression that learns the inverse transform (when fit_inverse_transform=True)."
        },
        {
            "name": "fit inverse transform",
            "type": "bool, default=False",
            "desc": "Learn the inverse transform for non-precomputed kernels. (i.e. learn to find the pre-image of a point)"
        },
        {
            "name": "eigen solver",
            "type": "string [‘auto’|’dense’|’arpack’], default=’auto’",
            "desc": "Select eigensolver to use. If n_components is much less than the number of training samples, arpack may be more efficient than the dense eigensolver."
        },
        {
            "name": "tol",
            "type": "float, default=0",
            "desc": "Convergence tolerance for arpack. If 0, optimal value will be chosen by arpack."
        },
        {
            "name": "max iter",
            "type": "int, default=None",
            "desc": "Maximum number of iterations for arpack. If None, optimal value will be chosen by arpack."
        },
        {
            "name": "remove zero eig",
            "type": "boolean, default=False",
            "desc": "If True, then all components with zero eigenvalues are removed, so that the number of components in the output may be < n_components (and sometimes even zero due to numerical instability). When n_components is None, this parameter is ignored and components with zero eigenvalues are removed regardless."
        },
        {
            "name": "random state",
            "type": "int, RandomState instance or None, optional (default=None)",
            "desc": "If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by np.random. Used when eigen_solver == ‘arpack’.  New in version 0.18."
        },
        {
            "name": "copy X",
            "type": "boolean, default=True",
            "desc": "If True, input X is copied and stored by the model in the X_fit_ attribute. If no further changes will be done to X, setting copy_X=False saves memory by storing a reference.  New in version 0.18."
        },
        {
            "name": "n jobs",
            "type": "int, default=1",
            "desc": "The number of parallel jobs to run. If -1, then the number of jobs is set to the number of CPU cores.  New in version 0.18."
        }
    ],
    "attrs": [
        {
            "name": "lambdas",
            "type": "array, (n_components,)",
            "desc": "Eigenvalues of the centered kernel matrix in decreasing order. If n_components and remove_zero_eig are not set, then all values are stored."
        },
        {
            "name": "alphas",
            "type": "array, (n_samples, n_components)",
            "desc": "Eigenvectors of the centered kernel matrix. If n_components and remove_zero_eig are not set, then all components are stored."
        },
        {
            "name": "dual coef",
            "type": "array, (n_samples, n_features)",
            "desc": "Inverse transform matrix. Set if fit_inverse_transform is True."
        },
        {
            "name": "X transformed fit",
            "type": "array, (n_samples, n_components)",
            "desc": "Projection of the fitted data on the kernel principal components."
        },
        {
            "name": "X fit",
            "type": "(n_samples, n_features)",
            "desc": "The data used to fit the model. If copy_X=False, then X_fit_ is a reference. This attribute is used for the calls to transform."
        }
    ],
    "citations": [
        {
            "name": "Kernel principal component analysis. In Advances in kernel methods",
            "desc": "Bernhard Schoelkopf, Alexander J. Smola, and Klaus-Robert Mueller. 1999. Kernel principal component analysis. In Advances in kernel methods, MIT Press, Cambridge, MA, USA 327-352.",
            "url": "http://pca.narod.ru/scholkopf_kernel.pdf"
        },
        
        {
            "name": "Scikit-learn: Machine Learning in Python",
            "desc": "Scikit-learn: Machine Learning in Python, Pedregosa et al., JMLR 12, pp. 2825-2830, 2011.",
            "url": "http://www.jmlr.org/papers/volume12/pedregosa11a/pedregosa11a.pdf"
        },
        {
            "name": "API design for machine learning software: experiences from the scikit-learn project",
            "desc": "API design for machine learning software: experiences from the scikit-learn project, Buitinck et al., 2013.",
            "url": "http://www.di.ens.fr/sierra/pdfs/icml09.pdf"
        }
    ]
}