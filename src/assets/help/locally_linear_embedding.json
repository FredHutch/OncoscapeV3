{
    "method": "Locally Linear Embedding",
    "desc": "<span class='help-method'>Perform a Locally Linear Embedding analysis on the data.</span>Read more in the scikit-learn user guide. ",
    "url": "http://scikit-learn.org/stable/modules/generated/sklearn.manifold.locally_linear_embedding.html#sklearn.manifold.locally_linear_embedding",
    "params": [
        {
            "name": "X",
            "type": "{array-like, sparse matrix, BallTree, KDTree, NearestNeighbors}",
            "desc": "Sample data, shape = (n_samples, n_features), in the form of a numpy array, sparse array, precomputed tree, or NearestNeighbors object."
        },
        {
            "name": "n neighbors",
            "type": "integer",
            "desc": "number of neighbors to consider for each point."
        },
        {
            "name": "n components",
            "type": "integer",
            "desc": "number of coordinates for the manifold."
        },
        {
            "name": "reg",
            "type": "float",
            "desc": "regularization constant, multiplies the trace of the local covariance matrix of the distances."
        },
        {
            "name": "eigen solver",
            "type": "string, {‘auto’, ‘arpack’, ‘dense’}",
            "desc": "auto : algorithm will attempt to choose the best method for input data  arpack : use arnoldi iteration in shift-invert mode. For this method, M may be a dense matrix, sparse matrix, or general linear operator. Warning: ARPACK can be unstable for some problems.  It is best to try several random seeds in order to check results.  dense : use standard dense matrix operations for the eigenvalue decomposition.  For this method, M must be an array or matrix type.  This method should be avoided for large problems."
        },
        {
            "name": "tol",
            "type": "float, optional",
            "desc": "Tolerance for ‘arpack’ method Not used if eigen_solver==’dense’."
        },
        {
            "name": "max iter",
            "type": "integer",
            "desc": "maximum number of iterations for the arpack solver."
        },
        {
            "name": "method",
            "type": "{‘standard’, ‘hessian’, ‘modified’, ‘ltsa’}",
            "desc": "standard : use the standard locally linear embedding algorithm. see reference [R193]  hessian : use the Hessian eigenmap method.  This method requires n_neighbors > n_components * (1 + (n_components + 1) / 2. see reference [R194]  modified : use the modified locally linear embedding algorithm. see reference [R195]  ltsa : use local tangent space alignment algorithm see reference [R196]"
        },
        {
            "name": "hessian tol",
            "type": "float, optional",
            "desc": "Tolerance for Hessian eigenmapping method. Only used if method == ‘hessian’"
        },
        {
            "name": "modified tol",
            "type": "float, optional",
            "desc": "Tolerance for modified LLE method. Only used if method == ‘modified’"
        },
        {
            "name": "random state",
            "type": "int, RandomState instance or None, optional (default=None)",
            "desc": "If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by np.random. Used when solver == ‘arpack’."
        },
        {
            "name": "n jobs",
            "type": "int, optional (default = 1)",
            "desc": "The number of parallel jobs to run for neighbors search. If -1, then the number of jobs is set to the number of CPU cores."
        }
    ],
    "attrs": [
        {
            "name": "Y",
            "type": "array-like, shape [n_samples, n_components]",
            "desc": "Embedding vectors."
        },
        {
            "name": "squared error",
            "type": "float",
            "desc": "Reconstruction error for the embedding vectors. Equivalent to norm(Y - W Y, 'fro')**2, where W are the reconstruction weights."
        }
    ],
    "citations": [
        {
            "name": "",
            "desc": "",
            "url": ""
        }
    ]
}