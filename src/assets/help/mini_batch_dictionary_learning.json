{"method":"Mini Batch Dictionary Learning","desc":"<span class='help-method'>Mini-batch dictionary learning</span>Finds a dictionary (a set of atoms) that can best be used to represent data using a sparse code. Solves the optimization problem: (U^*,V^*) = argmin 0.5 || Y - U V ||_2^2 + alpha * || U ||_1 (U,V) with || V_k ||_2 = 1 for all  0 <= k < n_components Read more in the scikit-learn user guide. ","url":"http://scikit-learn.org/stable/modules/generated/sklearn.decomposition.MiniBatchDictionaryLearning.html#sklearn.decomposition.MiniBatchDictionaryLearning","params":[{"name":"n components","type":"int,","desc":"number of dictionary elements to extract"},{"name":"alpha","type":"float,","desc":"sparsity controlling parameter"},{"name":"n iter","type":"int,","desc":"total number of iterations to perform"},{"name":"fit algorithm","type":"{‘lars’, ‘cd’}","desc":"lars: uses the least angle regression method to solve the lasso problem (linear_model.lars_path) cd: uses the coordinate descent method to compute the Lasso solution (linear_model.Lasso). Lars will be faster if the estimated components are sparse."},{"name":"n jobs","type":"int,","desc":"number of parallel jobs to run"},{"name":"batch size","type":"int,","desc":"number of samples in each mini-batch"},{"name":"shuffle","type":"bool,","desc":"whether to shuffle the samples before forming batches"},{"name":"dict init","type":"array of shape (n_components, n_features),","desc":"initial value of the dictionary for warm restart scenarios"},{"name":"transform algorithm","type":"{‘lasso_lars’, ‘lasso_cd’, ‘lars’, ‘omp’,     ‘threshold’}","desc":"Algorithm used to transform the data. lars: uses the least angle regression method (linear_model.lars_path) lasso_lars: uses Lars to compute the Lasso solution lasso_cd: uses the coordinate descent method to compute the Lasso solution (linear_model.Lasso). lasso_lars will be faster if the estimated components are sparse. omp: uses orthogonal matching pursuit to estimate the sparse solution threshold: squashes to zero all coefficients less than alpha from the projection dictionary * X’"},{"name":"transform n nonzero coefs","type":"int, 0.1 * n_features by default","desc":"Number of nonzero coefficients to target in each column of the solution. This is only used by algorithm=’lars’ and algorithm=’omp’ and is overridden by alpha in the omp case."},{"name":"transform alpha","type":"float, 1. by default","desc":"If algorithm=’lasso_lars’ or algorithm=’lasso_cd’, alpha is the penalty applied to the L1 norm. If algorithm=’threshold’, alpha is the absolute value of the threshold below which coefficients will be squashed to zero. If algorithm=’omp’, alpha is the tolerance parameter: the value of the reconstruction error targeted. In this case, it overrides n_nonzero_coefs."},{"name":"verbose","type":"bool, optional (default","desc":"To control the verbosity of the procedure."},{"name":"split sign","type":"bool, False by default","desc":"Whether to split the sparse feature vector into the concatenation of its negative part and its positive part. This can improve the performance of downstream classifiers."},{"name":"random state","type":"int, RandomState instance or None, optional (default=None)","desc":"If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by np.random."}],"attrs":[{"name":"components","type":"array, [n_components, n_features]","desc":"components extracted from the data"},{"name":"inner stats","type":"tuple of (A, B) ndarrays","desc":"Internal sufficient statistics that are kept by the algorithm. Keeping them is useful in online settings, to avoid loosing the history of the evolution, but they shouldn’t have any use for the end user. A (n_components, n_components) is the dictionary covariance matrix. B (n_features, n_components) is the data approximation matrix"},{"name":"n iter","type":"int","desc":"Number of iterations run."}]}