{
    "method": "PCA",
    "summary": "Principal component analysis is a statistical procedure that uses an orthogonal transformation to convert a set of observations of possibly correlated variables into a set of values of linearly uncorrelated variables called principal components.",
    "desc": "<span class='help-method'>Principal component analysis (PCA)</span>Linear dimensionality reduction using Singular Value Decomposition of the data to project it to a lower dimensional space. It uses the LAPACK implementation of the full SVD or a randomized truncated SVD by the method of Halko et al. 2009, depending on the shape of the input data and the number of components to extract. It can also use the scipy.sparse.linalg ARPACK implementation of the truncated SVD. Notice that this class does not support sparse input. See TruncatedSVD for an alternative with sparse data. ",
    "urlparagraph":"Read more in the scikit-learn user guide.",
    "url": "http://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html#sklearn.decomposition.PCA",
    "tutorial": [
        {
            "desc": "Learn more on Oncoscape + Sci-Kit clustering methods",
            "url": "https://www.youtube.com/embed/XQu8TTBmGhA"  
        }
    ],
    "params": [
        {
            "name": "n components",
            "type": "int, float, None or string",
            "desc": "Number of components to keep. if n_components is not set all components are kept: n_components == min(n_samples, n_features)   if n_components == ‘mle’ and svd_solver == ‘full’, Minka’s MLE is used to guess the dimension if 0 < n_components < 1 and svd_solver == ‘full’, select the number of components such that the amount of variance that needs to be explained is greater than the percentage specified by n_components n_components cannot be equal to n_features for svd_solver == ‘arpack’."
        },
        {
            "name": "copy",
            "type": "bool (default True)",
            "desc": "If False, data passed to fit are overwritten and running fit(X).transform(X) will not yield the expected results, use fit_transform(X) instead."
        },
        {
            "name": "whiten",
            "type": "bool, optional (default False)",
            "desc": "When True (False by default) the components_ vectors are multiplied by the square root of n_samples and then divided by the singular values to ensure uncorrelated outputs with unit component-wise variances. Whitening will remove some information from the transformed signal (the relative variance scales of the components) but can sometime improve the predictive accuracy of the downstream estimators by making their data respect some hard-wired assumptions."
        },
        {
            "name": "svd solver",
            "type": "string {‘auto’, ‘full’, ‘arpack’, ‘randomized’}",
            "desc": "auto : the solver is selected by a default policy based on X.shape and n_components: if the input data is larger than 500x500 and the number of components to extract is lower than 80% of the smallest dimension of the data, then the more efficient ‘randomized’ method is enabled. Otherwise the exact full SVD is computed and optionally truncated afterwards.  full : run exact full SVD calling the standard LAPACK solver via scipy.linalg.svd and select the components by postprocessing  arpack : run SVD truncated to n_components calling ARPACK solver via scipy.sparse.linalg.svds. It requires strictly 0 < n_components < X.shape[1]  randomized : run randomized SVD by the method of Halko et al.    New in version 0.18.0."
        },
        {
            "name": "tol",
            "type": "float >= 0, optional (default .0)",
            "desc": "Tolerance for singular values computed by svd_solver == ‘arpack’.  New in version 0.18.0."
        },
        {
            "name": "iterated power",
            "type": "int >= 0, or ‘auto’, (default ‘auto’)",
            "desc": "Number of iterations for the power method computed by svd_solver == ‘randomized’.  New in version 0.18.0."
        },
        {
            "name": "random state",
            "type": "int, RandomState instance or None, optional (default None)",
            "desc": "If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by np.random. Used when svd_solver == ‘arpack’ or ‘randomized’.  New in version 0.18.0."
        }
    ],
    "attrs": [
        {
            "name": "components",
            "type": "array, shape (n_components, n_features)",
            "desc": "Principal axes in feature space, representing the directions of maximum variance in the data. The components are sorted by explained_variance_."
        },
        {
            "name": "explained variance",
            "type": "array, shape (n_components,)",
            "desc": "The amount of variance explained by each of the selected components. Equal to n_components largest eigenvalues of the covariance matrix of X.  New in version 0.18."
        },
        {
            "name": "explained variance ratio",
            "type": "array, shape (n_components,)",
            "desc": "Percentage of variance explained by each of the selected components. If n_components is not set then all components are stored and the sum of explained variances is equal to 1.0."
        },
        {
            "name": "singular values",
            "type": "array, shape (n_components,)",
            "desc": "The singular values corresponding to each of the selected components. The singular values are equal to the 2-norms of the n_components variables in the lower-dimensional space."
        },
        {
            "name": "mean",
            "type": "array, shape (n_features,)",
            "desc": "Per-feature empirical mean, estimated from the training set. Equal to X.mean(axis=0)."
        },
        {
            "name": "n components",
            "type": "int",
            "desc": "The estimated number of components. When n_components is set to ‘mle’ or a number between 0 and 1 (with svd_solver == ‘full’) this number is estimated from input data. Otherwise it equals the parameter n_components, or n_features if n_components is None."
        },
        {
            "name": "noise variance",
            "type": "float",
            "desc": "The estimated noise covariance following the Probabilistic PCA model from Tipping and Bishop 1999. See “Pattern Recognition and Machine Learning” by C. Bishop, 12.2.1 p. 574 or http://www.miketipping.com/papers/met-mppca.pdf. It is required to computed the estimated data covariance and score samples. Equal to the average of (min(n_features, n_samples) - n_components) smallest eigenvalues of the covariance matrix of X."
        }
    ],
    "citations": [
        {
            "name": "Scikit-learn: Machine Learning in Python",
            "desc": "Scikit-learn: Machine Learning in Python, Pedregosa et al., JMLR 12, pp. 2825-2830, 2011.",
            "url": "http://www.jmlr.org/papers/v12/pedregosa11a.html"
        },
        {
            "name": "For n_components == ‘mle’",
            "desc": "This class uses the method of Thomas P. Minka: Automatic Choice of Dimensionality for PCA. NIPS 2000: 598-604",
            "url": "https://papers.nips.cc/paper/1853-automatic-choice-of-dimensionality-for-pca.pdf"
        },
        {
            "name": "For svd_solver == ‘arpack’,",
            "desc": "Refer to scipy.sparse.linalg.svds",
            "url": "https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.svds.html"
        },
        {
            "name": "For svd_solver == ‘randomized’",
            "desc": "Finding structure with randomness: Stochastic algorithms for constructing approximate matrix decompositions Halko, et al., 2009 (arXiv:909) ",
            "url": "https://arxiv.org/abs/0909.4061"
        },
        {
            "name": "For svd_solver == ‘randomized’",
            "desc": "A randomized algorithm for the decomposition of matrices Per-Gunnar Martinsson, Vladimir Rokhlin and Mark Tygert",
            "url": "https://www.sciencedirect.com/science/article/pii/S1063520310000242"
        },
        {
            "name": "Scikit-learn: Machine Learning in Python",
            "desc": "Scikit-learn: Machine Learning in Python, Pedregosa et al., JMLR 12, pp. 2825-2830, 2011.",
            "url": "http://www.jmlr.org/papers/volume12/pedregosa11a/pedregosa11a.pdf"
        },
        {
            "name": "API design for machine learning software: experiences from the scikit-learn project",
            "desc": "API design for machine learning software: experiences from the scikit-learn project, Buitinck et al., 2013.",
            "url": "http://www.di.ens.fr/sierra/pdfs/icml09.pdf"
        }
    ]
}