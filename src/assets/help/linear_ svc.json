{
  "method": "Linear SVC",
  "summary": "The objective of a Linear SVC (Support Vector Classifier) is to fit to the data you provide, returning a 'best fit' hyperplane that divides, or categorizes, your data.",
  "desc": "<span class='help-method'>Linear Support Vector Classification. Similar to SVC with parameter kernel=’linear’, but implemented in terms of liblinear rather than libsvm, so it has more flexibility in the choice of penalties and loss functions and should scale better to large numbers of samples. This class supports both dense and sparse input and the multiclass support is handled according to a one-vs-the-rest scheme.",
  "urlparagraph": "Read more in the User Guide.",
  "url": "http://scikit-learn.org/stable/modules/generated/sklearn.svm.LinearSVC.html#sklearn.svm.LinearSVC",
  "tutorial": [{
    "desc": "Learn more on Oncoscape + Sci-Kit clustering methods",
    "url": "https://www.youtube.com/embed/XQu8TTBmGhA"
  }],
  "params": [{
      "name": "penalty",
      "type": "string, ‘l1’ or ‘l2’ (default=’l2’)",
      "desc": "Specifies the norm used in the penalization. The ‘l2’ penalty is the standard used in SVC. The ‘l1’ leads to coef_vectors that are sparse loss"
    },
    {
      "name": "loss",
      "type": "string, ‘hinge’ or ‘squared_hinge’ (default=’squared_hinge’)",
      "desc": "Specifies the loss function. ‘hinge’ is the standard SVM loss (used e.g. by the SVC class) while ‘squared_hinge’ is the square of the hinge loss."
    },
    {
      "name": "dual ",
      "type": "bool, (default=True)",
      "desc": "Select the algorithm to either solve the dual or primal optimization problem. Prefer dual=False when n_samples > n_features."
    },
    {
      "name": "tol",
      "type": "float, optional (default=1e-4)",
      "desc": "Tolerance for stopping criteria."
    },
    {
      "name": "C",
      "type": "float, optional (default=1.0)",
      "desc": "Penalty parameter C of the error term."
    },
    {
      "name": "multi_class",
      "type": "string, ‘ovr’ or ‘crammer_singer’ (default=’ovr’)",
      "desc": "Determines the multi-class strategy if y contains more than two classes.'ovr' trains n_classes one-vs-rest classifiers, while 'crammer_singer' optimizes a joint objective over all classes. While crammer_singer is interesting from a theoretical perspective as it is consistent, it is seldom used in practice as it rarely leads to better accuracy and is more expensive to compute. If 'crammer_singer' is chosen, the options loss, penalty and dual will be ignored."
    },
    {
      "name": "fit_intercept",
      "type": "boolean, optional (default=True)",
      "desc": "Whether to calculate the intercept for this model. If set to false, no intercept will be used in calculations (i.e. data is expected to be already centered).",
    },
    {
      "name": "intercept_scaling",
      "type": "float, optional (default=1)",
      "desc": "When self.fit_intercept is True, instance vector x becomes [x, self.intercept_scaling], i.e. a “synthetic” feature with constant value equals to intercept_scaling is appended to the instance vector. The intercept becomes intercept_scaling * synthetic feature weight Note! the synthetic feature weight is subject to l1/l2 regularization as all other features. To lessen the effect of regularization on synthetic feature weight (and therefore on the intercept) intercept_scaling has to be increased."
    },
    {
      "name": "class_weight",
      "type": "dict, ‘balanced’}, optional",
      "desc": "Set the parameter C of class i to class_weight[i]*C for SVC. If not given, all classes are supposed to have weight one. The “balanced” mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as n_samples / (n_classes * np.bincount(y))"
    },
    {
      "name": "verbose",
      "type": "int, (default=0)",
      "desc": "Enable verbose output. Note that this setting takes advantage of a per-process runtime setting in liblinear that, if enabled, may not work properly in a multithreaded context."
    },
    {
      "name": "random_state",
      "type": "int, RandomState instance or None, optional (default=None)",
      "desc": "The seed of the pseudo random number generator to use when shuffling the data for the dual coordinate descent (if dual=True). When dual=False the underlying implementation of LinearSVC is not random and random_state has no effect on the results. If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by np.random."
    },
    {
      "name": "max_iter",
      "type": "int, (default=1000)",
      "desc": "The maximum number of iterations to be run."
    }
  ],
  "attrs": [{
      "name": "coef_",
      "type": "array, shape = [n_features] if n_classes == 2 else [n_classes, n_features]. Weights assigned to the features (coefficients in the primal problem). This is only available in the case of a linear kernel. coef_ is a readonly property derived from raw_coef_ that follows the internal memory layout of liblinear intercept",
      "desc": ""
    },
    {
      "name": "intercept",
      "type": "array, shape = [1] if n_classes == 2 else [n_classes]",
      "desc": "Constants in decision function."
    }
  ],
  "citations": [{
    "name": "LIBLINEAR -- A Library for Large Linear Classification",
    "desc": "Machine Learning Group at National Taiwan University Contributors",
    "url": "https://www.csie.ntu.edu.tw/~cjlin/liblinear/"
  }]
}
